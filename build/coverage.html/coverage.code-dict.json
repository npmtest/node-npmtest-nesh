{"/home/travis/build/npmtest/node-npmtest-nesh/test.js":"/* istanbul instrument in package npmtest_nesh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nesh/lib.npmtest_nesh.js":"/* istanbul instrument in package npmtest_nesh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nesh = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nesh = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nesh/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nesh && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nesh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nesh\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nesh.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nesh.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nesh.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nesh.__dirname + '/lib.npmtest_nesh.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/nesh.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nNode Enhanced Interactive Interpreter\n=====================================\nProvides a simple to use, extensible, embeddable interpreter for\nyour apps.\n */\n\n(function() {\n  var callPluginMethod, fs, initialized, nesh, neshInfo, path, processPlugins, start,\n    hasProp = {}.hasOwnProperty;\n\n  fs = require('fs');\n\n  neshInfo = require('../package');\n\n  path = require('path');\n\n\n  /*\n  Process a method call on all loaded plugins. This calls the requested\n  method on each plugin in the order they were added, skipping plugins\n  which do not have the method defined. If the method is defined and it\n  takes two parameters (arg, next) then it is assumed to be async and\n  treated as such, otherwise treated as a sync call. Callback is\n  passed an error if one occurs during processing.\n   */\n\n  processPlugins = function(method, arg, callback) {\n    var process;\n    if (!nesh.plugins.length) {\n      return typeof callback === \"function\" ? callback() : void 0;\n    }\n    process = function(i) {\n      if (i >= nesh.plugins.length) {\n        return typeof callback === \"function\" ? callback() : void 0;\n      }\n      if (nesh.plugins[i][method] != null) {\n        return callPluginMethod(nesh.plugins[i][method], arg, function(err) {\n          if (err) {\n            nesh.log.error(\"Error in plugin \" + nesh.plugins[i].name + \":\");\n            if (err.stack) {\n              nesh.log.error(err.stack);\n            } else {\n              nesh.log.error(err);\n            }\n          }\n          if (err) {\n            return typeof callback === \"function\" ? callback(err) : void 0;\n          }\n          return process(i + 1);\n        });\n      } else {\n        return process(i + 1);\n      }\n    };\n    return process(0);\n  };\n\n\n  /*\n  Call the possibly async method. callback gets passed an error\n  object if an error occurs.\n   */\n\n  callPluginMethod = function(method, arg, callback) {\n    var err;\n    if (method.length === 2) {\n      return method(arg, callback);\n    } else {\n      try {\n        method(arg);\n      } catch (error) {\n        err = error;\n        return typeof callback === \"function\" ? callback(err) : void 0;\n      }\n      return callback();\n    }\n  };\n\n  start = function(opts, callback) {\n    var key, ref, value;\n    if (typeof opts === 'function') {\n      callback = opts;\n    }\n    ref = nesh.defaults;\n    for (key in ref) {\n      if (!hasProp.call(ref, key)) continue;\n      value = ref[key];\n      if (opts[key] == null) {\n        opts[key] = value;\n      }\n    }\n    return processPlugins('preStart', {\n      nesh: nesh,\n      options: opts\n    }, function(err) {\n      var repl;\n      if (err) {\n        return typeof callback === \"function\" ? callback(err) : void 0;\n      }\n      repl = nesh.repl.start(opts);\n      repl.opts = opts;\n      return processPlugins('postStart', {\n        nesh: nesh,\n        options: opts,\n        repl: repl\n      }, function(err) {\n        if (err) {\n          return typeof callback === \"function\" ? callback(err) : void 0;\n        }\n        return typeof callback === \"function\" ? callback(err, repl) : void 0;\n      });\n    });\n  };\n\n  nesh = exports;\n\n  nesh.version = neshInfo.version;\n\n  nesh.defaults = {\n    useGlobal: true,\n    prompt: 'nesh> '\n  };\n\n  nesh.compile = null;\n\n  nesh.repl = require('repl');\n\n  nesh.plugins = [];\n\n  nesh.config = require('./config');\n\n  nesh.log = require('./log');\n\n  nesh.languages = function() {\n    return fs.readdirSync(__dirname + \"/languages\").filter(function(item) {\n      return item.slice(-2) === 'js';\n    }).map(function(item) {\n      return item.split('.').slice(0, -1).join('.');\n    });\n  };\n\n  nesh.loadLanguage = function(data) {\n    switch (typeof data) {\n      case 'function':\n        return data({\n          nesh: nesh\n        });\n      case 'string':\n        return require(\"./languages/\" + data).setup({\n          nesh: nesh\n        });\n      default:\n        throw new Error(\"Data must be a function or string! Received \" + data);\n    }\n  };\n\n  nesh.loadPlugin = function(plugin, callback) {\n    var e, name, prefix;\n    if (typeof plugin === 'string') {\n      name = plugin;\n      try {\n        plugin = require(\"./plugins/\" + name);\n      } catch (error) {\n        e = error;\n        try {\n          prefix = path.join(nesh.config.home, '.nesh_modules', 'node_modules');\n          plugin = require(path.join(prefix, name));\n        } catch (error) {\n          e = error;\n          return callback(\"Could not find plugin '\" + name + \"': \" + e + \"!\");\n        }\n      }\n      if (plugin.name == null) {\n        plugin.name = name;\n      }\n      if (plugin.description == null) {\n        plugin.description = 'No description';\n      }\n    }\n    nesh.plugins.push(plugin);\n    if (plugin.setup) {\n      return callPluginMethod(plugin.setup, {\n        nesh: nesh\n      }, callback);\n    } else {\n      return callback();\n    }\n  };\n\n  initialized = false;\n\n  nesh.init = function(autoload, callback) {\n    if (autoload == null) {\n      autoload = true;\n    }\n    initialized = true;\n    if (autoload) {\n      return nesh.loadPlugin('autoload', function(err) {\n        if (err) {\n          return typeof callback === \"function\" ? callback(\"[autoload] \" + err) : void 0;\n        } else {\n          return typeof callback === \"function\" ? callback() : void 0;\n        }\n      });\n    } else {\n      return typeof callback === \"function\" ? callback() : void 0;\n    }\n  };\n\n  nesh.start = function(opts, callback) {\n    if (opts == null) {\n      opts = {};\n    }\n    if (!initialized) {\n      return nesh.init(true, function(err) {\n        if (err) {\n          return typeof callback === \"function\" ? callback(err) : void 0;\n        }\n        return start(opts, callback);\n      });\n    } else {\n      return start(opts, callback);\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=nesh.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/config.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nNesh Configuration. Implements a basic configuration system\nwhich can load and save state via JSON. By default this data\nis stored in ~/.nesh_config.json, but a custom path can be\npassed to the load and save functions.\n */\n\n(function() {\n  var _config, config, fs, log, path;\n\n  fs = require('fs');\n\n  log = require('./log');\n\n  path = require('path');\n\n  _config = {};\n\n  config = exports;\n\n  config.home = process.env.HOME || process.env.USERPROFILE;\n\n  config.path = path.join(config.home, '.nesh_config.json');\n\n  config.reset = function() {\n    return _config = {};\n  };\n\n  config.load = function(path) {\n    var e;\n    if (path == null) {\n      path = config.path;\n    }\n    if (fs.existsSync(path)) {\n      log.debug(\"Loading config from \" + path);\n      try {\n        return _config = require(path);\n      } catch (error) {\n        e = error;\n        throw \"Error loading Nesh config from \" + path + \": \" + e;\n      }\n    } else {\n      return log.debug(\"No config found at \" + path);\n    }\n  };\n\n  config.save = function(path) {\n    if (path == null) {\n      path = config.path;\n    }\n    return fs.writeFileSync(path, JSON.stringify(_config));\n  };\n\n  config.get = function() {\n    return _config;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=config.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/log.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nNesh logging module. This is exposed as `nesh.logger` and can be\nhooked into your app's logging infrastructure. By default the\nmessages get printed to stdout.\n */\n\n(function() {\n  var logger;\n\n  require('colors');\n\n  module.exports = logger = {\n    DEBUG: 4,\n    INFO: 3,\n    WARN: 2,\n    ERROR: 1,\n    level: 3,\n    colors: true,\n    levelName: function() {\n      var names;\n      names = {};\n      names[logger.DEBUG] = 'debug';\n      names[logger.INFO] = 'info';\n      names[logger.WARN] = 'warn';\n      names[logger.ERROR] = 'error';\n      return names[logger.level];\n    },\n    log: function(level, msg) {\n      if (level <= logger.level) {\n        return console.log(msg);\n      }\n    },\n    debug: function(msg) {\n      return logger.log(logger.DEBUG, logger.colors ? msg.grey : msg);\n    },\n    info: function(msg) {\n      return logger.log(logger.INFO, msg);\n    },\n    warn: function(msg) {\n      return logger.log(logger.WARN, logger.colors ? msg.yellow : msg);\n    },\n    error: function(msg) {\n      return logger.log(logger.ERROR, logger.colors ? msg.red : msg);\n    },\n\n    /*\n    Convenience methods for logging frameworks\n     */\n    test: function() {\n      logger.colors = false;\n      logger.output = '';\n      logger.level = logger.DEBUG;\n      return logger.log = function(level, message) {\n        if (level <= logger.level) {\n          return logger.output += message;\n        }\n      };\n    },\n    winston: function() {\n      var winston;\n      winston = require('winston');\n      logger.colors = false;\n      return logger.log = function(level, msg) {\n        if (level <= logger.level) {\n          return winston[logger.levelName()](msg);\n        }\n      };\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=log.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/bin/nesh.js":"#!/usr/bin/env node\n\nrequire('../lib/command');\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/command.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nThe nesh command, which parses options and then drops the user\ninto an interactive session.\n */\n\n(function() {\n  var _, argv, config, disabled, enabled, evalArg, evalArgs, evalScript, evalScripts, exec, fs, install, isJs, nesh, optimist, opts, path, prefix, uninstall,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  _ = require('underscore');\n\n  exec = require('child_process').exec;\n\n  fs = require('fs');\n\n  nesh = require('./nesh');\n\n  path = require('path');\n\n  optimist = require('optimist').usage('$0 [options]').options('b', {\n    describe: 'Load Babel for ES6/7 support; shortcut for -l babel',\n    boolean: true\n  }).options('c', {\n    describe: 'Load CoffeeScript; shortcut for -l coffee',\n    boolean: true\n  }).options('disable', {\n    describe: 'Disable plugin(s) for autoload',\n    string: true\n  }).options('e', {\n    alias: 'eval',\n    describe: 'Filename or string to eval in the REPL context',\n    string: true\n  }).options('enable', {\n    describe: 'Enable plugin(s) for autoload',\n    string: true\n  }).options('h', {\n    alias: 'help',\n    describe: 'Show help and exit',\n    boolean: true\n  }).options('l', {\n    alias: 'lang',\n    describe: 'Set interpreter language',\n    string: true\n  }).options('list-languages', {\n    describe: 'List available languages',\n    boolean: true\n  }).options('p', {\n    alias: 'prompt',\n    describe: 'Set prompt string',\n    string: true\n  }).options('plugins', {\n    describe: 'List auto-loaded plugins',\n    boolean: true\n  }).options('v', {\n    alias: 'version',\n    describe: 'Show version and exit',\n    boolean: true\n  }).options('verbose', {\n    describe: 'Enable verbose debug output',\n    boolean: true\n  }).options('w', {\n    alias: 'welcome',\n    describe: 'Set welcome message',\n    string: true\n  });\n\n  argv = optimist.argv;\n\n  if (argv.h) {\n    optimist.showHelp();\n    return;\n  }\n\n  if (argv.v) {\n    nesh.log.info(\"nesh version \" + nesh.version);\n    return;\n  }\n\n  if (argv['list-languages']) {\n    nesh.log.info(nesh.languages().join(', '));\n    return;\n  }\n\n  if (argv.verbose) {\n    nesh.log.level = nesh.log.DEBUG;\n  }\n\n  nesh.config.load();\n\n  if (argv.enable) {\n    enabled = argv.enable.split(',');\n    install = enabled.filter(function(item) {\n      return !fs.existsSync(\"./plugins/\" + item + \".js\");\n    });\n    prefix = path.join(nesh.config.home, '.nesh_modules');\n    if (install.length) {\n      exec(\"npm --prefix=\" + prefix + \" --color=always install \" + (install.join(' ')) + \" 2>&1\", function(err, stdout) {\n        nesh.log.info(stdout);\n        if (err) {\n          throw err;\n        }\n      });\n    }\n    config = nesh.config.get();\n    if (config.plugins == null) {\n      config.plugins = [];\n    }\n    config.plugins = _(config.plugins.concat(enabled)).uniq();\n    if (config.pluginsExclude == null) {\n      config.pluginsExclude = [];\n    }\n    config.pluginsExclude = _(config.pluginsExclude).reject(function(item) {\n      return indexOf.call(enabled, item) >= 0;\n    });\n    nesh.config.save();\n  }\n\n  if (argv.disable) {\n    disabled = argv.disable.split(',');\n    prefix = path.join(nesh.config.home, '.nesh_modules');\n    uninstall = disabled.filter(function(item) {\n      return fs.existsSync(path.join(prefix, 'node_modules', item));\n    });\n    if (uninstall.length) {\n      exec(\"npm --prefix=\" + prefix + \" --color=always rm \" + (uninstall.join(' ')) + \" 2>&1\", function(err, stdout) {\n        nesh.log.info(stdout);\n        if (err) {\n          throw err;\n        }\n      });\n    }\n    config = nesh.config.get();\n    if (config.plugins == null) {\n      config.plugins = [];\n    }\n    config.plugins = _(config.plugins).reject(function(item) {\n      return indexOf.call(disabled, item) >= 0;\n    });\n    if (config.pluginsExclude == null) {\n      config.pluginsExclude = [];\n    }\n    config.pluginsExclude = _(config.pluginsExclude.concat(disabled)).uniq();\n    nesh.config.save();\n  }\n\n  if (argv.enable || argv.disable) {\n    return;\n  }\n\n  if (argv.c) {\n    argv.lang = 'coffee';\n  }\n\n  if (argv.b) {\n    argv.lang = 'babel';\n  }\n\n  if (argv.lang) {\n    nesh.loadLanguage(argv.lang);\n  }\n\n  opts = {};\n\n  if (argv.prompt != null) {\n    opts.prompt = argv.prompt;\n  }\n\n  if (argv.welcome != null) {\n    opts.welcome = argv.welcome;\n  }\n\n  if (argv[\"eval\"]) {\n    evalArgs = argv[\"eval\"] instanceof Array ? argv[\"eval\"] : [argv[\"eval\"]];\n    evalScripts = (function() {\n      var i, len, results;\n      results = [];\n      for (i = 0, len = evalArgs.length; i < len; i++) {\n        evalArg = evalArgs[i];\n        isJs = false;\n        evalScript = fs.existsSync(evalArg) ? (isJs = evalArg.slice(-3) === '.js', fs.readFileSync(evalArg, 'utf-8')) : evalArg;\n        if (!isJs && nesh.compile) {\n          nesh.log.debug('Compiling eval data');\n          evalScript = nesh.compile(evalScript);\n        }\n        results.push(evalScript);\n      }\n      return results;\n    })();\n    opts.evalData = evalScripts.join(\";\\n\");\n  }\n\n  nesh.init(true, function(err) {\n    var i, len, plugin, ref;\n    if (err) {\n      return nesh.log.error(err);\n    }\n    if (argv.plugins) {\n      ref = nesh.plugins;\n      for (i = 0, len = ref.length; i < len; i++) {\n        plugin = ref[i];\n        nesh.log.info((plugin.name + \": \") + (\"\" + plugin.description).grey);\n      }\n      return;\n    }\n    return nesh.start(opts, function(err) {\n      if (err) {\n        return nesh.log.error(err);\n      }\n    });\n  });\n\n}).call(this);\n\n//# sourceMappingURL=command.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/autoload.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nAutoloader Plugin\n=================\nLoads the list of plugins specified in ~/.nesh_config.js if it exists,\notherwise loads a default set of plugins or a passed-in set of plugins.\nThis plugin is loaded by default when the `nesh` command is executed\nin a terminal.\n\nConfig options:\n\n{\n    ...\n    plugins: ['builtins', 'eval', ...],\n    pluginsExclude: ['foo']\n    ...\n}\n */\n\n(function() {\n  var _, fs, nesh, path,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  _ = require('underscore');\n\n  fs = require('fs');\n\n  nesh = require('../nesh');\n\n  path = require('path');\n\n  exports.name = 'autoload';\n\n  exports.description = 'Loads a default list of plugins';\n\n  exports.setup = function(context, next) {\n    var already_errored, completed, config, defaultPlugins, defaults, i, len, plugin, results;\n    defaults = context.nesh.defaults;\n    nesh.log.debug('Loading plugin autoload');\n    defaultPlugins = ['builtins', 'eval', 'history', 'version', 'welcome', 'require', 'doc'];\n    config = nesh.config.get();\n    if (config.plugins != null) {\n      defaultPlugins = _(defaultPlugins.concat(config.plugins)).uniq();\n    }\n    if (config.pluginsExclude != null) {\n      defaultPlugins = _(defaultPlugins).reject(function(item) {\n        return indexOf.call(config.pluginsExclude, item) >= 0;\n      });\n    }\n    if (defaults.plugins == null) {\n      defaults.plugins = defaultPlugins;\n    }\n    completed = 0;\n    already_errored = false;\n    results = [];\n    for (i = 0, len = defaultPlugins.length; i < len; i++) {\n      plugin = defaultPlugins[i];\n      results.push((function(plugin) {\n        nesh.log.debug(\"Loading plugin \" + plugin);\n        return nesh.loadPlugin(plugin, function(err) {\n          if (err) {\n            if (!already_errored) {\n              next(\"Error loading plugin \" + plugin + \": \" + err);\n            }\n            return already_errored = true;\n          } else {\n            completed += 1;\n            if (completed >= defaultPlugins.length) {\n              return next();\n            }\n          }\n        });\n      })(plugin));\n    }\n    return results;\n  };\n\n}).call(this);\n\n//# sourceMappingURL=autoload.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/builtins.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nBuiltin Utilities Plugin\n */\n\n(function() {\n  var _, crypto, querystring;\n\n  _ = require('underscore');\n\n  crypto = require('crypto');\n\n  querystring = require('querystring');\n\n  exports.name = 'builtins';\n\n  exports.description = 'Exposes built-in convenience methods';\n\n  exports.postStart = function(context) {\n    var cmd, repl;\n    repl = context.repl;\n\n    /*\n    Underscore utilities, see:\n    http://documentcloud.github.io/underscore\n     */\n    repl.context.__ = _;\n\n    /*\n    Hashing functions\n     */\n    repl.context.md5 = function(value) {\n      return crypto.createHash('md5').update(value).digest('hex');\n    };\n    repl.context.sha = function(value) {\n      return crypto.createHash('sha1').update(value).digest('hex');\n    };\n\n    /*\n    Random functions\n     */\n    repl.context.rand = function(start, end) {\n      if (start == null) {\n        start = 0;\n        end = 1;\n      } else if (end == null) {\n        end = start;\n        start = 0;\n      }\n      return Math.random() * (end - start) + start;\n    };\n    repl.context.randInt = function(start, end) {\n      return Math.round(repl.context.rand(start, end));\n    };\n    repl.context.randChoices = function(choices, length) {\n      var result;\n      if (length == null) {\n        length = 1;\n      }\n      result = [];\n      while (--length >= 0) {\n        result.push(choices[Math.floor(Math.random() * choices.length)]);\n      }\n      return result;\n    };\n    repl.context.randString = function(length, charSet) {\n      if (charSet == null) {\n        charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      }\n      return repl.context.randChoices(charSet.split(''), length).join('');\n    };\n    repl.context.randHex = function(length) {\n      return repl.context.randString(length, 'abcdef0123456789');\n    };\n\n    /*\n    Number representation shortcuts\n     */\n    repl.context.bin = function(val) {\n      return val.toString(2);\n    };\n    repl.context.oct = function(val) {\n      return val.toString(8);\n    };\n    repl.context.hex = function(val) {\n      return val.toString(16);\n    };\n\n    /*\n    URL encoding / decoding\n     */\n    repl.context.querystring = querystring;\n    repl.context.urlenc = querystring.escape;\n    repl.context.urldec = querystring.unescape;\n\n    /*\n    REPL Commands\n     */\n    cmd = {\n      help: 'Clear the screen',\n      action: function() {\n        repl.outputStream.write('\\u001B[2J\\u001B[0;0f');\n        return repl.displayPrompt();\n      }\n    };\n    return repl.defineCommand('cls', cmd);\n  };\n\n}).call(this);\n\n//# sourceMappingURL=builtins.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/eval.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nEval plugin for Nesh to evaluate code within the REPL context.\n */\n\n(function() {\n  var log, vm;\n\n  log = require('../log');\n\n  vm = require('vm');\n\n  exports.name = 'eval';\n\n  exports.description = 'Evaluates code in the context of the REPL';\n\n  exports.postStart = function(context) {\n    var repl;\n    repl = context.repl;\n    if (repl.opts.evalData) {\n      log.debug('Evaluating code in the REPL');\n      if (global === repl.context) {\n        return vm.runInThisContext(repl.opts.evalData);\n      } else {\n        return vm.runInContext(repl.opts.evalData, repl.context);\n      }\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=eval.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/history.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nHistory Plugin - adds persistent history to the interpreter so\nlong as no `.history` command has already been defined.\n\nThis plugin adds two new options:\n\n * historyFile: the filename of where to store history lines\n * historyMaxInputSize: Maximum number of bytes to load from\n                        the history file\n\nHistory support can be disabled by setting `historyFile` to\nnull or false in the interpreter options on startup:\n\n    nesh.start({historyFile: null}, function (err) { ... });\n */\n\n(function() {\n  var fs, path;\n\n  fs = require('fs');\n\n  path = require('path');\n\n  exports.name = 'history';\n\n  exports.description = 'Provides persistent history between sessions';\n\n  exports.setup = function(context) {\n    var config, defaults, ref;\n    ref = context.nesh, defaults = ref.defaults, config = ref.config;\n    if (defaults.historyFile == null) {\n      defaults.historyFile = path.join(config.home, '.node_history');\n    }\n    return defaults.historyMaxInputSize != null ? defaults.historyMaxInputSize : defaults.historyMaxInputSize = 10240;\n  };\n\n  exports.postStart = function(context) {\n    var buffer, cmd, fd, lastLine, maxSize, readFd, repl, size, stat;\n    repl = context.repl;\n    if (!repl.opts.historyFile) {\n      return;\n    }\n    if (repl.commands['.history']) {\n      return;\n    }\n    maxSize = repl.opts.historyMaxInputSize;\n    lastLine = null;\n    try {\n      stat = fs.statSync(repl.opts.historyFile);\n      size = Math.min(maxSize, stat.size);\n      readFd = fs.openSync(repl.opts.historyFile, 'r');\n      buffer = new Buffer(size);\n      fs.readSync(readFd, buffer, 0, size, stat.size - size);\n      repl.rli.history = buffer.toString().split('\\n').reverse();\n      if (stat.size > maxSize) {\n        repl.rli.history.pop();\n      }\n      if (repl.rli.history[0] === '') {\n        repl.rli.history.shift();\n      }\n      repl.rli.historyIndex = -1;\n      lastLine = repl.rli.history[0];\n    } catch (error) {}\n    fd = fs.openSync(repl.opts.historyFile, 'a');\n    repl.rli.addListener('line', function(code) {\n      if (code && code.length && code !== '.history' && lastLine !== code) {\n        fs.write(fd, code + \"\\n\", function() {});\n        return lastLine = code;\n      }\n    });\n    repl.rli.on('exit', function() {\n      return fs.close(fd, function() {});\n    });\n    cmd = {\n      help: 'Show command history',\n      action: function() {\n        repl.outputStream.write((repl.rli.history.slice(0).reverse().join('\\n')) + \"\\n\");\n        return repl.displayPrompt();\n      }\n    };\n    return repl.defineCommand('history', cmd);\n  };\n\n}).call(this);\n\n//# sourceMappingURL=history.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/version.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nVersion Information Plugin\n==========================\nThis plugin adds a new command to the repl called `.versions` that\nwill print out version information for nesh, any loaded languages,\nand Node itself. The new command is listed with a description when\nyou run `.help`.\n */\n\n(function() {\n  var nesh;\n\n  nesh = require('../nesh');\n\n  exports.name = 'version';\n\n  exports.description = 'Adds a .versions command';\n\n  exports.setup = function(context) {\n    return process.versions.nesh = nesh.version;\n  };\n\n  exports.postStart = function(context) {\n    var cmd, repl;\n    repl = context.repl;\n    cmd = {\n      help: 'Show Node version information',\n      action: function() {\n        var key, value, versions;\n        versions = ((function() {\n          var ref, results;\n          ref = process.versions;\n          results = [];\n          for (key in ref) {\n            value = ref[key];\n            results.push(key + \" \" + value);\n          }\n          return results;\n        })()).join('\\n');\n        repl.outputStream.write(versions + \"\\n\");\n        return repl.displayPrompt();\n      }\n    };\n    return repl.defineCommand('versions', cmd);\n  };\n\n}).call(this);\n\n//# sourceMappingURL=version.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/welcome.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nWelcome Message Plugin\n======================\nThis plugin adds a new option to the repl opts called `welcome` that,\nif set, will display the set string before starting the interpreter.\nThe welcome message can be set like so:\n\n    nesh.start {welcome: 'Hello!'}, (err) ->\n        console.log err if err\n */\n\n(function() {\n  require('colors');\n\n  exports.name = 'welcome';\n\n  exports.description = 'Displays a welcome message on startup';\n\n  exports.setup = function(context) {\n    var defaults;\n    defaults = context.nesh.defaults;\n    return defaults.welcome != null ? defaults.welcome : defaults.welcome = (\"Node \" + process.version + \"\\nType \") + \".help\".cyan + \" for more information\";\n  };\n\n  exports.preStart = function(context) {\n    var options, outStream;\n    options = context.options;\n    if (options.welcome) {\n      outStream = options.outputStream || process.stdout;\n      return outStream.write(options.welcome + \"\\n\");\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=welcome.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/require.js":"// Generated by CoffeeScript 1.11.1\n(function() {\n  var __doc__, colors, displayUsage, fs, optimist, vm;\n\n  __doc__ = \"Shorthand for requiring and assigning a module\\n\\n.require colors -> colors = require('colors')\\n.require ./User -> User = require('./User')\\n.require ./model/User -> User = require('./model/User')\\n.require use-global-fibrous -> useGlobalFibrous = require('use-global-fibrous')\\n.require lodash-node/modern/objects -> objects = require('lodash-node/modern/objects')\\n\\nIf the `require` is successful, the name of the variable that the module\\nhas been assigned to will be pre-filled into the REPL as the next\\nline of input. This behavior can be disabled with the command-line\\nargument `--no-require-echo`.\\n\";\n\n  colors = require('colors');\n\n  optimist = require('optimist');\n\n  vm = require('vm');\n\n  fs = require('fs');\n\n  displayUsage = function(repl) {\n    repl.outputStream.write(colors.cyan(\"Usage: .require <unquoted-module-name-or-path> [assign-to]\\n\"));\n    return repl.displayPrompt();\n  };\n\n  exports.postStart = function(context) {\n    var action, exec, repl;\n    repl = context.repl;\n    exec = function(s) {\n      if (repl.useGlobal) {\n        return vm.runInThisContext(s);\n      } else {\n        return vm.runInContext(s, repl.context);\n      }\n    };\n    action = function(m) {\n      var c, capNext, e, e2, expanded, i, len, ok, tokens, vName;\n      if (m.trim().length === 0) {\n        displayUsage(repl);\n        return;\n      }\n      if (/^[\\.\\/]+$/.test(m)) {\n        m = fs.realpathSync(process.cwd() + \"/\" + m);\n      }\n      tokens = m.split(/\\s+/);\n      if (tokens.length > 2) {\n        displayUsage(repl);\n        return;\n      } else if (tokens.length === 2) {\n        vName = tokens[1];\n        m = tokens[0];\n      } else {\n        vName = \"\";\n        capNext = false;\n        for (i = 0, len = m.length; i < len; i++) {\n          c = m[i];\n          if (c === '/') {\n            vName = \"\";\n          } else if (c === '-') {\n            capNext = true;\n          } else if (c === '.') {\n\n          } else {\n            if (capNext) {\n              vName += c.toUpperCase();\n            } else {\n              vName += c;\n            }\n            capNext = false;\n          }\n        }\n      }\n      expanded = vName + \" = require(\" + (JSON.stringify(m)) + \")\";\n      repl.outputStream.write(colors.green(expanded + \"\\n\"));\n      ok = true;\n      try {\n        exec(expanded);\n      } catch (error) {\n        e = error;\n        ok = false;\n        try {\n          if (m.slice(0, 2) !== \"./\") {\n            action(\"./\" + m);\n          } else {\n            throw e;\n          }\n        } catch (error) {\n          e2 = error;\n          ok = false;\n          repl.outputStream.write(colors.red(\".require: \" + e + \"\\n\"));\n        }\n      }\n      repl.displayPrompt();\n      if (ok && optimist.argv['require-echo'] !== false) {\n        return repl.rli.write(vName);\n      }\n    };\n    return repl.defineCommand('require', {\n      help: \"Require a module and assign it to a variable with the same name\",\n      action: action\n    });\n  };\n\n}).call(this);\n\n//# sourceMappingURL=require.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/plugins/doc.js":"// Generated by CoffeeScript 1.11.1\n(function() {\n  var __doc__, colors, intdoc, lang, lastTokenPlus, vm,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  colors = require('colors');\n\n  intdoc = require('intdoc');\n\n  lang = require('lodash-node/modern/lang');\n\n  vm = require('vm');\n\n  __doc__ = \"Shows documentation for an expression; you can also type Ctrl-Q in-line\";\n\n  lastTokenPlus = function(input) {\n    \"A crude cut at figuring out where the last thing you want to\\nevaluate in what you're typing is\\n\\nEx. If you are typing\\n  myVal = new somemodule.SomeClass\\n\\nYou probably just want help on `somemodule.SomeClass`\\n\";\n    var c, i, t;\n    t = \"\";\n    for (i = input.length - 1; i >= 0; i += -1) {\n      c = input[i];\n      if (indexOf.call(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.[]'\\\"$_:\", c) < 0) {\n        break;\n      }\n      t = c + t;\n    }\n    if (t[0] === \".\") {\n      t = t.slice(1);\n    }\n    if (t.slice(-1) === \".\") {\n      t = t.slice(0, -1);\n    }\n    return t;\n  };\n\n  exports.postStart = function(context) {\n    var document, originalEval, repl;\n    repl = context.repl;\n    document = function(expr, reportErrors, showCode) {\n      var callbackParam, defibbed, doc, e, result, tyname, x;\n      if (expr.trim().length === 0) {\n        if (reportErrors) {\n          repl.outputStream.write(colors.cyan(__doc__ + \"\\n\"));\n        }\n      } else {\n        try {\n          if (repl.useGlobal) {\n            result = vm.runInThisContext(\"(\" + expr + \")\");\n          } else {\n            result = vm.runInContext(\"(\" + expr + \")\", repl.context);\n          }\n        } catch (error) {\n          e = error;\n          if (reportErrors) {\n            repl.outputStream.write(colors.red(\"Bad input; can't document\\n\"));\n          }\n          repl.displayPrompt();\n          return null;\n        }\n        if ((result.that != null) && lang.isFunction(result)) {\n          result = result.that;\n          defibbed = true;\n        } else {\n          defibbed = false;\n        }\n        doc = intdoc(result);\n        if (defibbed) {\n          callbackParam = doc.params.pop();\n        }\n        if (doc.name && doc.name.length > 0) {\n          tyname = \"[\" + doc.type + \": \" + doc.name + \"]\";\n        } else {\n          tyname = \"[\" + doc.type + \"]\";\n        }\n        repl.outputStream.write(colors.cyan(tyname));\n        if (typeof result === 'function' && (doc.params != null)) {\n          repl.outputStream.write(colors.yellow(\" \" + doc.name + \"(\" + (((function() {\n            var i, len, ref, results;\n            ref = doc.params;\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n              x = ref[i];\n              results.push(\"\" + x);\n            }\n            return results;\n          })()).join(\", \")) + \")\"));\n          if (defibbed) {\n            repl.outputStream.write(colors.yellow(\" *\" + callbackParam + \" handled by fibrous\"));\n          }\n        }\n        repl.outputStream.write(\"\\n\");\n        if ((doc.doc != null) && doc.doc.length > 0) {\n          repl.outputStream.write(doc.doc + \"\\n\");\n        }\n      }\n      if (showCode) {\n        if (doc) {\n          if (doc.code != null) {\n            repl.outputStream.write(colors.green(doc.code + \"\\n\"));\n          } else {\n            repl.outputStream.write(colors.green(result.toString() + \"\\n\"));\n          }\n        }\n      }\n      repl.displayPrompt();\n      return doc;\n    };\n    repl.defineCommand('doc', {\n      help: __doc__,\n      action: function(expr) {\n        return document(expr, true);\n      }\n    });\n    repl.inputStream.on('keypress', function(char, key) {\n      var leave, rli;\n      if (!(key && key.ctrl && !key.meta && !key.shift && key.name === 'q')) {\n        leave = true;\n      }\n      if (leave) {\n        repl.__neshDoc__lastDoc = null;\n        return;\n      }\n      rli = repl.rli;\n      repl.__neshDoc__docRequested = true;\n      return rli.write(\"\\n\");\n    });\n    originalEval = repl[\"eval\"];\n    return repl[\"eval\"] = function(input, context, filename, callback) {\n      var doc, showCode, toDoc;\n      if (repl.__neshDoc__docRequested) {\n        repl.__neshDoc__docRequested = false;\n        input = input.slice(1, -2);\n        toDoc = lastTokenPlus(input);\n        if (toDoc !== input) {\n          repl.outputStream.write(colors.yellow(toDoc + \"\\n\"));\n        }\n        if (repl.__neshDoc__lastDoc === toDoc) {\n          showCode = true;\n        } else {\n          showCode = false;\n        }\n        doc = document(toDoc, false, showCode);\n        repl.__neshDoc__lastDoc = toDoc;\n        return repl.rli.write(input);\n      } else {\n        repl.__neshDoc__lastDoc = null;\n        return originalEval(input, context, filename, callback);\n      }\n    };\n  };\n\n}).call(this);\n\n//# sourceMappingURL=doc.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/languages/babel.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nES6/7 language component for Nesh, the Node.js enhanced shell.\n */\n\n(function() {\n  var babel, log, path, vm;\n\n  require('colors');\n\n  babel = require('babel-core');\n\n  log = require('../log');\n\n  path = require('path');\n\n  vm = require('vm');\n\n  exports.setup = function(arg) {\n    var nesh;\n    nesh = arg.nesh;\n    log.debug('Loading Babel');\n    require('babel-core/register');\n    nesh.compile = function(data) {\n      return babel.transform(data);\n    };\n    nesh.repl = {\n      start: function(opts) {\n        var repl;\n        opts[\"eval\"] = function(code, context, filename, callback) {\n          var e, err, output, result;\n          if (code[0] === '(' && code[code.length - 1] === ')') {\n            code = code.slice(1, -1);\n          }\n          err = null;\n          output = null;\n          try {\n            result = babel.transform(code, {\n              stage: 0\n            });\n            output = vm.runInThisContext(result.code, {\n              filename: filename\n            });\n          } catch (error) {\n            e = error;\n            err = e;\n          }\n          if (output === 'use strict') {\n            output = void 0;\n          }\n          return callback(err, output);\n        };\n        return repl = require('repl').start(opts);\n      }\n    };\n    process.versions['babel'] = babel.version;\n    nesh.defaults.welcome = (\"Babel \" + babel.version + \" on Node \" + process.version + \"\\nType \") + '.help'.cyan + ' for more information';\n    nesh.defaults.prompt = 'babel> ';\n    nesh.defaults.useGlobal = true;\n    return nesh.defaults.historyFile = path.join(nesh.config.home, '.babel_history');\n  };\n\n}).call(this);\n\n//# sourceMappingURL=babel.js.map\n","/home/travis/build/npmtest/node-npmtest-nesh/node_modules/nesh/lib/languages/coffee.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nCoffeeScript language component for Nesh, the Node.js enhanced shell.\n */\n\n(function() {\n  var coffee, log, path, semver;\n\n  require('colors');\n\n  coffee = require('coffee-script');\n\n  log = require('../log');\n\n  path = require('path');\n\n  semver = require('semver');\n\n  exports.setup = function(context) {\n    var nesh;\n    nesh = context.nesh;\n    log.debug('Loading CoffeeScript');\n    nesh.compile = function(data) {\n      return coffee.compile(data, {\n        bare: true,\n        header: false\n      });\n    };\n    nesh.repl = require('coffee-script/lib/coffee-script/repl');\n    process.versions['coffee-script'] = coffee.VERSION;\n    nesh.defaults.welcome = (\"CoffeeScript \" + coffee.VERSION + \" on Node \" + process.version + \"\\nType \") + '.help'.cyan + ' for more information';\n    nesh.defaults.prompt = 'coffee> ';\n    nesh.defaults.useGlobal = semver.satisfies(coffee.VERSION, \"> 1.6.3\");\n    if (!nesh.defaults.useGlobal) {\n      log.warn('Warning: inherited global context requires CoffeeScript > 1.6.3');\n      log.warn('         packages that modify built-in prototypes may not work');\n    }\n    return nesh.defaults.historyFile = path.join(nesh.config.home, '.coffee_history');\n  };\n\n}).call(this);\n\n//# sourceMappingURL=coffee.js.map\n"}